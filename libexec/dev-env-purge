#!/usr/bin/env ruby

defs = `rbenv install --list`.split.select { |v| v =~ /[0-9]/ }
versions = %w[2.5 2.6 2.7 2.8]

system "rbenv global system"

versions.each do |v|
  system "rbenv uninstall -f #{v}.0-dev && rbenv install -f #{v}.0-dev"
  Dir.chdir(ENV["RBENV_ROOT"] + "/versions") do
    File.unlink v if File.exist?(v)
    File.symlink(v + ".0-dev", v)
    defs.select { |d| d =~ /^#{v}.\d+$/ }.each do |stable|
      File.unlink stable if File.exist?(stable)
      File.symlink(v + ".0-dev", stable)
    end
  end
end

platforms = %w[jruby rbx truffleruby]

platforms.each do |pf|
  d = defs.select { |d| d =~ /#{pf}/ }.max_by { |v| v = v.gsub(/-rc/, ".").gsub(/[a-z\-]/, ""); Gem::Version.new(v) }
  system "rbenv uninstall -f #{d} && env SDKROOT=/Library/Developer/CommandLineTools/SDKs/MacOSX10.15.sdk MACOSX_DEPLOYMENT_TARGET=10.15 rbenv install #{d}"
end

system "rbenv global #{versions.last}.0-dev"

versions = %w[3.8 3.9]

system "pyenv global system"

versions.each do |v|
  system "pyenv uninstall -f #{v}-dev && env SDKROOT=/Library/Developer/CommandLineTools/SDKs/MacOSX10.15.sdk MACOSX_DEPLOYMENT_TARGET=10.15 pyenv install #{v}-dev"
end

system "pyenv global #{versions.first}-dev"
system "pip install -U pip"
system "pip install pipenv tldr pylint python-openstackclient jupyter notebook pandas bokeh matplotlib"

versions = %w[12.x node]

system "nodenv global system"

versions.each do |v|
  system "nodenv uninstall -f #{v}-dev && nodenv install #{v}-dev"
end

system "npm -g update npm"
