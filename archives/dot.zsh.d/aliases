alias -g G="| rg"
alias -g L="| less"
alias -g H="| head"
alias -g T="| tail"

alias ls="gls --color -F"
alias l="ls -Ah"
alias ll="ls -lah"

alias bx="bundle exec"
alias bo="bundle open"
alias bu="bundle update"
bcd () { cd -P `ruby -rubygems -rbundler -e "Bundler.load.specs.each{|s| puts s.full_gem_path if s.name == '${1}'}"` }
brg () { rg "$@" `bundle show --paths` }

git() { hub $@ }
alias g="git"
gsf() { /usr/bin/git svn fetch }
gsr() { /usr/bin/git svn rebase }
gsd() { /usr/bin/git svn dcommit }

alias e="atom-beta"
alias mk="make"
alias strace="dtruss"
alias xargs="gxargs"
alias find="gfind"
alias tar="gtar"

alias any='anyenv'
alias rb='rbenv'
alias py='pyenv'
alias ph='phpenv'

# homebrew development
prs(){(brew ruby -e "formula=Formula[\"$1\"] ; GitHub.issues_for_formula(formula.name, :tap => formula.tap).each { |i| puts i[\"$2\"] }")}
prurls(){(prs "$1" "html_url")}
prtitles(){(prs "$1" "title")}

# https://raw.githubusercontent.com/tcnksm/docker-alias/master/zshrc
# Get latest container ID
alias dl="docker ps -l -q"
# Get container process
alias dps="docker ps"
# Get process included stop container
alias dpa="docker ps -a"
# Get images
alias di="docker images"
# Get container IP
alias dip="docker inspect --format '{{ .NetworkSettings.IPAddress }}'"
# Run deamonized container, e.g., $dkd base /bin/echo hello
alias dkd="docker run -d -P"
# Run interactive container, e.g., $dki base /bin/bash
alias dki="docker run -i -t -P"
# Execute interactive container, e.g., $dex base /bin/bash
alias dex="docker exec -i -t"
# Stop all containers
dstop() { docker stop $(docker ps -a -q); }
# Remove all containers
drm() { docker rm $(docker ps -a -q); }
# Stop and Remove all containers
alias drmf='docker stop $(docker ps -a -q) && docker rm $(docker ps -a -q)'
# Remove all images
dri() { docker rmi $(docker images -q); }
# Dockerfile build, e.g., $dbu tcnksm/test
dbu() { docker build -t=$1 .; }
# Show all alias related docker
dalias() { alias | grep 'docker' | sed "s/^\([^=]*\)=\(.*\)/\1 => \2/"| sed "s/['|\']//g" | sort; }
# Clean all intermediate images
dcu() { docker ps -a -q -f "status=exited" | gxargs --no-run-if-empty docker rm -v && docker images -q -f "dangling=true" | gxargs --no-run-if-empty docker rmi -f }

function peco-src () {
    local selected_dir=$(ghq list --full-path | peco --query "$LBUFFER")
    if [ -n "$selected_dir" ]; then
        BUFFER="cd ${selected_dir}"
        zle accept-line
    fi
    zle clear-screen
}

function peco-select-history() {
    local tac
    if which tac > /dev/null; then
        tac="tac"
    else
        tac="tail -r"
    fi
    BUFFER=$(history -n 1 | \
        eval $tac | \
        peco --query "$LBUFFER")
    CURSOR=$#BUFFER
    zle clear-screen
}
